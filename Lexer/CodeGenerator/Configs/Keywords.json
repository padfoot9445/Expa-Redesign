{
    
    "number": {"name": "number", "types": ["1.1.1"], "__comment": "python-style infinite-precision number."},
            "int": {"name": "int", "types": ["1.1.1"], "__comment": "int32"},
            "double": {"name": "double", "types": ["1.1.1"], "__comment": "float64"},
            "decimal": {"name": "decimal", "types": ["1.1.1"], "__comment": "float128"},
            "float": {"name": "float", "types": ["1.1.1"], "__comment": "float32"},
            "long": {"name": "long", "types": ["1.1.1"], "__comment": "int64"},
            "imaginary": {"name": "imaginary", "types": ["1.1.1"], "__comment": "imaginary<type>"},
        "string": {"name": "string", "types": ["1.1.2"], "__comment": "char array"},
            "char": {"name": "char", "types": ["1.1.2.1"], "__comment": "char"},
        "bool": {"name": "bool", "types": ["1.1.3"], "__comment": "bool"},
    "=": {"name": "equals", "types": ["2.1.2"], "__comment": "assignment operator"},
        "+=": {"name": "assignAdd", "types": ["2.1.2"], "__comment": "shorthand for x = x + value(x += value); to prevent confusion we do not overload a secondary fallback function of force positive"},
        "-=": {"name": "assignSubtract", "types": ["2.1.2"], "__comment": "shorthand for x = x - value"},
        "*=": {"name": "assignMultiply", "types": ["2.1.2"], "__comment": "shorthand for x = x * value"},
        "/=": {"name": "assignDivide", "types": ["2.1.2"], "__comment": "shorthand for x = x / value"},
        "//=": {"name": "assignFloorDiv", "types": ["2.1.2"], "__comment": "shorthand for x = x // value"},
        "??=": {"name": "assignCoalesce", "types": ["2.1.2"], "__comment": "shorthand for x = x ?? value"},
    "+": {"name": "plus", "types": ["2.1.1", "2.1.2"], "__comment": "addition operator, abs operator"},
        "-": {"name": "minus", "types": ["2.1.1", "2.1.2"], "__comment": "subtraction operator, force negative operator"},
        "*": {"name": "star", "types": ["2.1.1", "2.1.3"], "__comment": "multiplication, pointer"},
        "/": {"name": "slash", "types": ["2.1.1"], "__comment": "division"},
        "**": {"name": "exponent", "types": ["2.1.1"], "__comment": "exponentiate"},
        "//": {"name": "floordiv", "types": ["2.1.1"], "__comment": "floor division(/// for single-line comments"},
    "<": {"name": "leftAngleBracket", "types": ["2.1.6"], "__comment": "lesser than and     open bracket for generics(generic syntax will be List<[int]> to avoid nesting issues"},
        ">": {"name": "rightAngleBracket", "types": ["2.1.6"], "__comment": "lesser than and open bracket for generics"},
        ">=": {"name": "GreaterThanOrEqualTo", "types": ["2.1.6"], "__comment": "Greater than or Equal To operator"},
        "<=": {"name": "LessThanOrEqualTo", "types": ["2.1.6"], "__comment": "Lesser than or equal to operator"},
        "==": {"name": "DoubleEquals", "types": ["2.1.6"], "__comment": "equality comparison operator"},
        "!=": {"name": "notEquals", "types": ["2.1.6"], "__comment": "not equals comparison operator"},
    "<<": {"name": "leftShift", "types": ["2.1.4"], "__comment": "left shift operator"},
        ">>": {"name": "rightShift", "types": ["2.1.4"], "__comment": "right shift operator"},
    "(": {"name": "leftParenthesis", "types": ["2.2.1"], "__comment": "open parenthesis"},
        ")": {"name": "rightParenthesis", "types": ["2.2.1"], "__comment": "close parenthesis"},
        "[": {"name": "leftSquareBracket", "types": ["2.2.2"], "__comment": "open square bracket"},
        "]": {"name": "rightSquareBracket", "types": ["2.2.2"], "__comment": "close square bracket"},
        "{": {"name": "leftBrace", "types": ["2.2.3", "2.2.5"], "__comment": "open brace"},
        "}": {"name": "rightBrace", "types": ["2.2.3", "2.2.5"], "__comment": "close brace"},
        "<[": {"name": "OpenGenericBracket", "types": ["2.2.4"], "__comment": "open generic bracket"},
        "]>": {"name": "closeGenericBracket", "types": ["2.2.4"], "__comment": "close generic bracket"},
    "!": {"name": "exclamationMark", "types":["2.1.7"], "__comment": "logical negation(not binary): inverts numbers and booleans"},
        "~": {"name": "tilde", "types":["2.1.4"], "__comment": "logical NOT"},
        "||": {"name": "doublePipe", "types":["2.1.4", "2.1.7"], "__comment": "logical OR and bitwise OR"},
        "|": {"name": "singlePipe", "types":["2.1.4", "2.1.7"], "__comment": "logical XOR and bitwise XOR"},
        "&": {"name": "ampersand", "types":["2.1.4", "2.1.7"], "__comment": "logical AND and bitwise AND"},
        "!||": {"name": "NOR", "types":["2.1.4", "2.1.7"], "__comment": "logical and bitwise NOR"},
        "!|": {"name": "NXOR", "types":["2.1.4", "2.1.7"], "__comment": "logical and bitwise NXOR"},
        "!&": {"name": "NAND", "types":["2.1.4", "2.1.7"], "__comment": "logical and bitwise NAND"},
    "InterpreterIdentifier": {"name": "InterpreterIdentifier", "types": ["0"], "__comment": ""},
    "InterpreterNumber": {"name": "InterpreterNumber", "types": ["0"], "__comment": ""},
    "InterpreterString": {"name": "InterpreterString", "types": ["0"], "__comment": ""}
}